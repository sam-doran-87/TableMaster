/* General body and heading styling */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 20px;
    background-color: #f8f8f8;
    color: #333;
}

h2 {
    color: #2c3e50;
    text-align: center;
    margin-bottom: 25px;
    font-size: 2.2em;
}

.action-controls {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 400px;
    margin: 0 auto 20px auto;
    padding: 0 10px;
    box-sizing: border-box;
}

.add-item-inputs {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center;
}

#newItemText {
    padding: 10px 12px;
    border: 1px solid #c0c0c0;
    border-radius: 6px;
    font-size: 16px;
    flex-grow: 2;
    min-width: 150px;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
}

#newItemInitiative {
    padding: 10px 12px;
    border: 1px solid #c0c0c0;
    border-radius: 6px;
    font-size: 16px;
    flex-grow: 1;
    max-width: 90px;
    text-align: center;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    -moz-appearance: textfield;
}
#newItemInitiative::-webkit-outer-spin-button,
#newItemInitiative::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.buttons-row {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center;
}

#addItemButton {
    padding: 10px 18px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.2s ease, transform 0.1s ease;
    flex-grow: 1;
    min-width: 120px;
}
#addItemButton:hover { background-color: #45a049; transform: translateY(-1px); }
#addItemButton:active { background-color: #3e8e41; transform: translateY(0); }

#sortInitiativeButton {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.2s ease, transform 0.1s ease;
    flex-grow: 1;
    min-width: 140px;
}
#sortInitiativeButton:hover { background-color: #0056b3; transform: translateY(-1px); }
#sortInitiativeButton:active { background-color: #004085; transform: translateY(0); }


/* Sortable List Container */
#sortable-list {
    list-style: none;
    padding: 0;
    width: 400px;
    margin: 20px auto;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.05);
    overflow: hidden;
}

/* Default List Item Styles */
#sortable-list li {
    margin: 0;
    padding: 10px 15px;
    border-bottom: 1px solid #eee;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 16px;
    line-height: 1.5;
    position: relative;
    display: flex;
    align-items: center;
    gap: 10px;

    background: linear-gradient(to bottom, #333333, #000000);
    color: #ffffff;
    transition: background 0.3s ease, border-color 0.3s ease, transform 0.1s ease;
    cursor: pointer; /* Indicate it's clickable */
}
#sortable-list li:last-child { border-bottom: none; }


/* NEW: Highlighted List Item Style */
#sortable-list li.highlighted {
    background: linear-gradient(to bottom, #ffd700, #ffa500); /* Gold/Orange gradient */
    color: #333333;
    border: 2px solid #ffaa00; /* Matching border */
    transform: scale(1.01); /* Slightly enlarge */
    box-shadow: 0 4px 10px rgba(255, 165, 0, 0.4); /* Glow effect */
    z-index: 1; /* Bring to front if overlapping */
}


/* Hover State for List Items */
#sortable-list li:not(.sortable-chosen):not(.sortable-ghost):not(.highlighted):hover {
    background: linear-gradient(to bottom, #e0e0e0, #ffffff);
    border-color: #a0a0a0;
    color: #333333;
    transform: translateY(-1px);
}


/* Dragging Styles (SortableJS specific classes) */
#sortable-list li.sortable-chosen {
    padding: 15px;
    background: linear-gradient(to bottom, #add8e6, #87ceeb);
    border-color: #007bff;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    transform: scale(1.02);
    z-index: 1000;
    color: #333333;
}

#sortable-list li.sortable-ghost {
    opacity: 0.4;
    background-color: #cccccc;
    border: 2px dashed #999999;
    padding: 10px 15px;
    box-sizing: border-box;
}

#sortable-list li.sortable-drag {
    opacity: 1;
}

/* Styling for the Drag Handle */
#sortable-list li .handle {
    flex-shrink: 0;
    width: 25px;
    height: 25px;
    background-color: #5a6268;
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 4px;
    font-size: 1.2em;
    font-weight: bold;
    cursor: grab;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    transition: background-color 0.2s ease, transform 0.1s ease;
}

#sortable-list li .handle:hover {
    background-color: #6c757d;
    transform: scale(1.05);
}

#sortable-list li .handle:active {
    cursor: grabbing;
}


/* Styling for the Character Name span */
#sortable-list li .item-text {
    flex-grow: 1;
    min-height: 1.5em;
    cursor: text;
    padding: 0 5px;
    border-radius: 3px;
    margin-right: 10px;
}

/* Styling for the Edit Button */
.edit-button {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 5px 10px;
    font-size: 0.85em;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.1s ease;
    flex-shrink: 0;
    margin-left: auto;
    margin-right: 5px;
}

.edit-button:hover {
    background-color: #0056b3;
    transform: translateY(-1px);
}

.edit-button:active {
    background-color: #004085;
    transform: translateY(0);
}


/* Styling for the Initiative Score span */
#sortable-list li .initiative-score {
    flex-shrink: 0;
    width: 40px;
    text-align: center;
    font-weight: bold;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 5px 0;
    border-radius: 4px;
    cursor: text;
}

/* Styling for when text/initiative spans are in editable mode */
#sortable-list li .item-text[contenteditable="true"],
#sortable-list li .initiative-score[contenteditable="true"] {
    outline: 2px dashed #007bff;
    background: #fffacd !important;
    color: #333;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    cursor: text;
    padding: 0 2px;
    border-radius: 3px;
}

/* Styling for the Remove Button */
.remove-button {
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 50%;
    width: 25px;
    height: 25px;
    font-size: 0.8em;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.1s ease;
    flex-shrink: 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

.remove-button:hover {
    background-color: #c82333;
    transform: scale(1.1);
}

.remove-button:active {
    background-color: #bd2130;
    transform: scale(1.0);
}


/* NEW: Character Sheet Styles */
#character-sheet {
    width: 400px;
    margin: 20px auto;
    padding: 15px 20px;
    background-color: #ffffff;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.05);
    color: #333;
}

#character-sheet h3 {
    text-align: center;
    color: #2c3e50;
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1.8em;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
}

#character-sheet p {
    margin-bottom: 8px;
    font-size: 1.1em;
}

#character-sheet p strong {
    color: #555;
    min-width: 70px; /* Align labels if needed */
    display: inline-block;
}

#character-sheet span {
    font-weight: normal;
    color: #000;
}
Key CSS Changes:

Added .highlighted class with a gold/orange gradient, border, slight scale, and box-shadow for a glow effect.

Added cursor: pointer; to #sortable-list li to visually indicate they are clickable.

New styles for #character-sheet and its inner elements (h3, p, strong, span) to give it a clean, distinct appearance.

3. Update Your JavaScript (<script> section in index.html)
This is where the main logic for highlighting and populating the sheet will go. We'll also update the saveState and loadState functions to handle HP and Status.

JavaScript

// Get references to all necessary HTML elements
const sortableList = document.getElementById('sortable-list');
const newItemText = document.getElementById('newItemText');
const newItemInitiative = document.getElementById('newItemInitiative');
const addItemButton = document.getElementById('addItemButton');
const sortInitiativeButton = document.getElementById('sortInitiativeButton');

// NEW: Get references to character sheet elements
const characterSheet = document.getElementById('character-sheet');
const sheetName = document.getElementById('sheet-name');
const sheetHp = document.getElementById('sheet-hp');
const sheetStatus = document.getElementById('sheet-status');


// --- Initialize SortableJS ---
const sortable = Sortable.create(sortableList, {
    animation: 150,
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    handle: '.handle',
});

// --- Helper function to create a new list item HTML element ---
// Modified to accept hp and status
function createListItemElement(nameText, initiativeValue, hpValue = 30, statusText = "Normal") {
    const listItem = document.createElement('li');
    listItem.setAttribute('data-initiative', initiativeValue);
    listItem.setAttribute('data-hp', hpValue); // NEW
    listItem.setAttribute('data-status', statusText); // NEW

    listItem.innerHTML = `
        <span class="handle">â‹®</span>
        <span class="item-text">${nameText}</span>
        <button class="edit-button">Edit</button>
        <span class="initiative-score">${initiativeValue}</span>
        <button class="remove-button">X</button>
    `;
    return listItem;
}

// --- NEW: Function to Save the Current State to localStorage ---
// Modified to include hp and status
function saveState() {
    const items = [];
    sortableList.querySelectorAll('li').forEach(listItem => {
        const name = listItem.querySelector('.item-text').textContent;
        const initiative = listItem.querySelector('.initiative-score').textContent;
        const hp = listItem.getAttribute('data-hp'); // NEW
        const status = listItem.getAttribute('data-status'); // NEW
        items.push({ name: name, initiative: initiative, hp: hp, status: status }); // NEW
    });
    localStorage.setItem('rpgEncounterList', JSON.stringify(items));
    console.log('List state saved.');
}

// --- NEW: Function to Load the State from localStorage ---
// Modified to load hp and status
function loadState() {
    const savedList = localStorage.getItem('rpgEncounterList');
    if (savedList) {
        const items = JSON.parse(savedList);
        sortableList.innerHTML = ''; // Clear any default HTML items
        items.forEach(item => {
            // Pass hp and status to createListItemElement
            const listItem = createListItemElement(item.name, item.initiative, item.hp, item.status);
            sortableList.appendChild(listItem);
        });
        console.log('List state loaded.');
    } else {
        console.log('No saved list found, using default HTML items.');
        // If no saved state, ensure default items also have data-hp/status
        // and save them for first time use.
        sortableList.querySelectorAll('li').forEach(listItem => {
            if (!listItem.hasAttribute('data-hp')) listItem.setAttribute('data-hp', '30');
            if (!listItem.hasAttribute('data-status')) listItem.setAttribute('data-status', 'Normal');
        });
        saveState(); // Save initial state including new data attributes
    }
}


// --- Function to Start Editing a Span ---
function startEditingSpan(spanElement) {
    sortable.option('disabled', true);
    spanElement.setAttribute('contenteditable', 'true');
    spanElement.focus();
    const range = document.createRange();
    range.selectNodeContents(spanElement);
    const sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
}

// --- Function to Add a New List Item ---
// Modified to provide default HP and Status
function addListItem() {
    const nameText = newItemText.value.trim();
    const initiativeValue = parseInt(newItemInitiative.value.trim(), 10) || 0;

    if (nameText) {
        // Pass default HP and Status for new items
        const listItem = createListItemElement(nameText, initiativeValue, 30, "Normal");
        sortableList.appendChild(listItem);
        newItemText.value = '';
        newItemInitiative.value = '';
        newItemText.focus();
        saveState();
    }
}

// --- Event Listeners for Adding Items ---
addItemButton.addEventListener('click', addListItem);
newItemText.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') { addListItem(); }
});
newItemInitiative.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') { addListItem(); }
});


// --- Function to Remove a List Item ---
sortableList.addEventListener('click', function(event) {
    if (event.target.classList.contains('remove-button')) {
        const listItem = event.target.closest('li');
        if (listItem) {
            sortableList.removeChild(listItem);
            saveState();
            // NEW: Clear character sheet if the selected item is removed
            if (listItem.classList.contains('highlighted')) {
                clearCharacterSheet();
            }
        }
    }
});


// --- Event Listener for Edit Button Click ---
sortableList.addEventListener('click', function(event) {
    if (event.target.classList.contains('edit-button')) {
        const listItem = event.target.closest('li');
        const itemTextSpan = listItem.querySelector('.item-text');
        if (itemTextSpan) {
            startEditingSpan(itemTextSpan);
        }
    }
});


// --- Existing Double-Click Functionality ---
sortableList.addEventListener('dblclick', function(event) {
    const targetSpan = event.target.closest('.item-text') || event.target.closest('.initiative-score');
    const isButtonOrHandle = event.target.classList.contains('handle') || 
                             event.target.classList.contains('edit-button') || 
                             event.target.classList.contains('remove-button');

    if (targetSpan && !isButtonOrHandle) {
        startEditingSpan(targetSpan);
    }
});


// --- Handle Editing Completion (on blur or Enter key) ---
sortableList.addEventListener('blur', function(event) {
    const targetElement = event.target;
    if (targetElement.getAttribute('contenteditable') === 'true' &&
        (targetElement.classList.contains('item-text') || targetElement.classList.contains('initiative-score'))) {

        sortable.option('disabled', false);
        targetElement.removeAttribute('contenteditable');

        let newContent = targetElement.textContent.trim();
        const listItem = targetElement.closest('li'); // Get listItem reference here

        if (targetElement.classList.contains('initiative-score')) {
            let numValue = parseInt(newContent, 10);
            if (isNaN(numValue)) { numValue = 0; }
            targetElement.textContent = numValue;
            if (listItem) { listItem.setAttribute('data-initiative', numValue); }
        } else { // This is an item-text span
            targetElement.textContent = newContent;
            if (targetElement.textContent === '') {
                if (listItem) { sortableList.removeChild(listItem); }
            }
        }
        saveState(); // Save state after editing
        // NEW: If the edited item is highlighted, update the character sheet
        if (listItem && listItem.classList.contains('highlighted')) {
            populateCharacterSheet(listItem);
        }
    }
}, true);

sortableList.addEventListener('keypress', function(event) {
    if (event.key === 'Enter' &&
        event.target.getAttribute('contenteditable') === 'true' &&
        (event.target.classList.contains('item-text') || event.target.classList.contains('initiative-score'))) {
        event.preventDefault();
        event.target.blur();
    }
});


// --- Function to Sort the List by Initiative Score ---
sortInitiativeButton.addEventListener('click', function() {
    const listItems = Array.from(sortableList.children);

    listItems.sort((a, b) => {
        const initiativeA = parseInt(a.getAttribute('data-initiative'), 10) || 0;
        const initiativeB = parseInt(b.getAttribute('data-initiative'), 10) || 0;
        return initiativeB - initiativeA;
    });

    listItems.forEach(item => {
        sortableList.appendChild(item);
    });
    saveState();
    // NEW: Re-highlight and re-populate if a character was selected before sort
    const previouslySelected = document.querySelector('.highlighted');
    if (previouslySelected) {
        populateCharacterSheet(previouslySelected);
    }
});


// --- NEW: Function to populate the character sheet ---
function populateCharacterSheet(listItem) {
    if (!listItem) {
        clearCharacterSheet();
        return;
    }
    const name = listItem.querySelector('.item-text').textContent;
    const hp = listItem.getAttribute('data-hp');
    const status = listItem.getAttribute('data-status');

    sheetName.textContent = name;
    sheetHp.textContent = hp;
    sheetStatus.textContent = status;
    characterSheet.style.display = 'block'; // Ensure sheet is visible
}

// --- NEW: Function to clear the character sheet ---
function clearCharacterSheet() {
    sheetName.textContent = '--';
    sheetHp.textContent = '--';
    sheetStatus.textContent = '--';
    // characterSheet.style.display = 'none'; // Optionally hide if nothing is selected
}

// --- NEW: Event Listener for List Item Clicks (Highlighting & Populating) ---
sortableList.addEventListener('click', function(event) {
    // Only proceed if the click target is the li itself, or a child that isn't a button/handle
    const clickedItem = event.target.closest('li');
    if (clickedItem) {
        // Prevent clicking on specific interactive elements within the li from highlighting
        const isInteractiveElement = event.target.classList.contains('handle') ||
                                     event.target.classList.contains('edit-button') ||
                                     event.target.classList.contains('remove-button') ||
                                     event.target.closest('[contenteditable="true"]'); // If already editing

        if (!isInteractiveElement) {
            // Remove highlight from all other items
            sortableList.querySelectorAll('li').forEach(item => {
                item.classList.remove('highlighted');
            });

            // Add highlight to the clicked item
            clickedItem.classList.add('highlighted');

            // Populate character sheet with this item's data
            populateCharacterSheet(clickedItem);
        }
    }
});

// --- NEW: Clear highlight and sheet when clicking outside the list ---
document.addEventListener('click', function(event) {
    if (!sortableList.contains(event.target) && !characterSheet.contains(event.target)) {
        sortableList.querySelectorAll('li').forEach(item => {
            item.classList.remove('highlighted');
        });
        clearCharacterSheet();
    }
});


// --- Load state when the page finishes loading ---
window.addEventListener('load', loadState);

// Initialize character sheet to blank state on load
clearCharacterSheet();

/* Styling for when text/initiative spans are in editable mode */
/* EXTENDED to character sheet spans */
#sortable-list li .item-text[contenteditable="true"],
#sortable-list li .initiative-score[contenteditable="true"],
#character-sheet #sheet-hp[contenteditable="true"],    /* NEW */
#character-sheet #sheet-status[contenteditable="true"] /* NEW */
{
    outline: 2px dashed #007bff;
    background: #fffacd !important;
    color: #333;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    cursor: text;
    padding: 0 2px;
    border-radius: 3px;
}

/* NEW: Add pointer cursor to character sheet editable spans */
#character-sheet #sheet-hp,
#character-sheet #sheet-status {
    cursor: pointer;
}
